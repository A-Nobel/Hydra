<?xml version="1.0" encoding="ISO-8859-15"?>
<launch>
  <arg name="voxel_size"     default="0.05"/>

  <arg name="sensor_frame" default="left_cam"/>

  <arg name="scene" default="scene5"/>
  <arg name="data_path" default="/home/ubuntu/datasets/tesse_goseek"/>
  <arg name="scene_path" default="$(arg data_path)/$(arg scene)"/>

  <arg name="tsdf_map_path" default="$(arg scene_path)/$(arg scene)_tsdf.vxblx"/>
  <arg name="rgb_tsdf_map_path" default="$(arg scene_path)/$(arg scene)_tsdf.vxblx"/>
  <arg name="esdf_map_path" default="$(arg scene_path)/$(arg scene)_esdf.vxblx"/>
  <arg name="sparse_graph_path" default="$(arg scene_path)/$(arg scene)_sparse_graph.vxblx"/>

  <arg name="semantic_map_file" default="goseek_$(arg scene)_with_coco_segmentation_mapping.csv"/>
  <arg name="semantic_map_path" default="$(arg scene_path)/$(arg semantic_map_file)"/>
  <arg name="semantic_typology_file" default="goseek_typology.yaml"/>
  <arg name="semantic_typology_path" default="$(find kimera_scene_graph)/config/$(arg semantic_typology_file)"/>

  <arg name="verbosity" default="0"/>

  <arg name="debug" default="false"/>
  <arg name="launch-prefix" default="gdb --args" if="$(arg debug)"/>
  <arg name="launch-prefix" default="" unless="$(arg debug)"/>
  <!-- Send colored pointcloud with scene_graph to kimera_scene_graph for 3D segmentation -->
  <!--launch-prefix="gdb -ex run args"-->
  <node name="kimera_scene_graph_eval_node"
        pkg="kimera_scene_graph"
        type="scene_graph_eval"
        output="screen"
        launch-prefix="$(arg launch-prefix)"
        required="true"
        args="-alsologtostderr -colorlogtostderr -v=$(arg verbosity)">
    <param name="room_finder_esdf_slice_level"       value="2.05"/>
<!--    2.1- scenes 1-4 -->

    <!-- Object Finder Type: 0: region growing, 1: euclidean clustering -->
    <param name="object_finder_type"                 value="1"/>

    <param name="visualize"                          value="true"/>
    <param name="tsdf_voxel_size"                    value="0.05"/>
    <param name="tsdf_voxels_per_side"               value="32"/>
    <param name="rgb_tsdf_voxel_size"                value="0.05"/>
    <param name="rgb_tsdf_voxels_per_side"           value="32"/>
    <param name="incremental"                        value="false"/>
    <param name="add_robot_pose"                     value="false"/>
    <param name="generate_mesh"                      value="true"/>
    <param name="num_viewpoints"                     value="50"/>
    <param name="truncation_distance"                value="0.4"/>
    <param name="esdf_min_distance_m"                value="0.2"/>
    <param name="verbose"                            value="true"/>
    <param name="max_attempts_to_generate_viewpoint" value="20"/>
    <param name="world_frame"                        value="world"/>
    <param name="scene_graph_output_path"            value="$(find kimera_scene_graph)/vxblx_files/goseek_scene_graph.vxblx"/>
    <param name="layer_step_z"                       value="5"/>

    <!-- Params -->
    <param name="max_ray_length_m"          value="10.0" />
    <param name="min_time_between_msgs_sec" value="0.2" />
    <param name="voxel_carving_enabled"     value="true" />
    <param name="color_mode"                value="lambert_color"/>
    <param name="use_const_weight"          value="false" />

    <param name="sensor_frame"              value="$(arg sensor_frame)"/>
    <param name="use_tf_transforms"         value="true" />

    <param name="enable_icp"                value="false" />
    <param name="icp_iterations"            value="10" />

    <!-- "fast" or "merged" -->
    <param name="semantic_tsdf_integrator_type"    value="fast" />
    <!-- "color", "semantic" or "semantic_probability" -->
    <param name="semantic_color_mode"              value="semantic"/>
    <param name="semantic_measurement_probability" value="0.8" />

    <!-- Load what are the semantic labels typology: dynamic, stuff, things -->
    <rosparam command="load" file="$(arg semantic_typology_path)"/>

    <param name="load_tsdf_map"     value="$(arg tsdf_map_path)"/>
    <param name="load_rgb_tsdf_map" value="$(arg rgb_tsdf_map_path)"/>
    <param name="load_esdf_map"     value="$(arg esdf_map_path)"/>
    <param name="load_sparse_graph" value="$(arg sparse_graph_path)"/>

    <!-- Whether to rebuild the esdf layer from scratch -->
    <param name="build_esdf_batch" value="false"/>

    <!-- Is this needed? -->
    <param name="slice_level" value="1.0" />

    <param name="semantic_label_2_color_csv_filepath" value="$(arg semantic_map_path)"/>

    <param name="publish_pointclouds"     value="true"/>
    <param name="update_mesh_every_n_sec" value="0.1" />
    <param name="mesh_filename"           value="$(find kimera_semantics_ros)/mesh_results/$(anon tesse).ply" />
  </node>

  <!-- Publish a static tf to visualize scene-graph in orthographic projection sideways -->
  <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" args="0 0 0 0.707 0 0 0.707 world rviz_ortho 100" />
</launch>
