#!/usr/bin/env python
PACKAGE = "kimera_scene_graph"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

region_growing_cluster_estimator = gen.add_group(
"region_growing_cluster_estimator", type="tab")
region_growing_cluster_estimator.add("normal_estimator_neighbour_size",    int_t,    0,
"Size of neighborhood to estimate normals for region growing clustering", 50,  0, 100)
region_growing_cluster_estimator.add("number_of_neighbours",    int_t,    0,
"N", 30,  0, 100)
region_growing_cluster_estimator.add("rg_min_cluster_size",    int_t,    0,
"Minimum size for a cluster to be accepted", 50,  0, 100)
region_growing_cluster_estimator.add("rg_max_cluster_size",    int_t,    0,
"Maximum size for a cluster to be accepted", 100000,  0, 100000)
region_growing_cluster_estimator.add("smoothness_threshold", double_t, 0,
"Smoothness term for clustering",    0.05235, 0,   1)
region_growing_cluster_estimator.add("curvature_threshold", double_t, 0,
"Curvature term for clustering",     1.0, 0, 1)

euclidean_cluster_estimator = gen.add_group(
"euclidean_cluster_estimator", type="tab")
euclidean_cluster_estimator.add("ec_min_cluster_size",    int_t,    0,
"Minimum size for a cluster to be accepted", 50,  0, 100)
euclidean_cluster_estimator.add("ec_max_cluster_size",    int_t,    0,
"Maximum size for a cluster to be accepted", 100000,  0, 100000)
euclidean_cluster_estimator.add("cluster_tolerance",    double_t,    0,
"Cluster", 0.25, 0, 1)

object_finder_enum = gen.enum([ gen.const("kRegionGrowing",
                        int_t, 0, "A region growing clustering algorithm"),
                       gen.const("kEuclidean",
                        int_t, 1, "An euclidean clustering algorithm")],
                     "An enum to set type of object clustering algorithm.")
gen.add("object_finder_type", int_t, 0,
"Type of object finder to be used", 1, 0, 1, edit_method=object_finder_enum)

exit(gen.generate(PACKAGE, "kimera_scene_graph", "kimera_scene_graph"))
