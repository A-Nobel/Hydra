<?xml version="1.0" encoding="UTF-8"?>

<launch>

    <arg name="use_gt_semantics" default="true"/>
    <arg name="use_gt_frame" default="true"/>
    <arg name="use_oriented_bounding_boxes" default="false"/>
    <arg name="exit_after_bag" default="false"/>

    <arg name="enable_dsg_lcd" default="false"/>
    <arg name="lcd_config" default="$(find kimera_dsg_builder)/config/uhumans/dsg_lcd_config.yaml"/>
    <arg name="optimize_on_lc" default="true"/>

    <arg name="dsg_output_dir" default="$(find kimera_dsg_builder)/output/habitat/mp3d"/>
    <arg name="dsg_output_prefix" default="mp3d"/>

    <arg name="dsg_should_log" default="true" />
    <arg name="pgmo_should_log" default="true"/>

    <arg name="typology_dir" default="$(find kimera_dsg_builder)/config"/>
    <arg name="typology_config" default="mp3d_typology.yaml"/>

    <arg name="semantic_map_dir" default="$(find dsg_habitat_sim)/config"/>
    <arg name="semantic_map_file" default="mp3d_segmentation_mapping.csv"/>
    <arg name="semantic_map_path" default="$(arg semantic_map_dir)/$(arg semantic_map_file)"/>

    <arg name="debug" default="false"/>
    <arg name="launch_prefix" value="gdb -ex run --args" if="$(arg debug)"/>
    <arg name="launch_prefix" value="" unless="$(arg debug)"/>

    <arg name="min_glog_level" default="3"/>
    <arg name="verbosity" default="0"/>
    <arg name="glog_to_file" default="false"/>
    <arg name="glog_dir" default="$(find kimera_dsg_builder)/glogs"/>
    <arg name="topology_glog_dir" default="$(find kimera_topology)/glogs"/>
    <arg name="glog_file_args" value="--logtostderr=0 --log_dir=$(arg glog_dir)" if="$(arg glog_to_file)"/>
    <arg name="glog_file_args" value="" unless="$(arg glog_to_file)"/>

    <arg name="dsg_path" value="$(arg dsg_output_dir)/$(arg dsg_output_prefix)"/>
    <arg name="pgmo_log_path" default="$(arg dsg_path)/pgmo"/>
    <arg name="ros_output" value="screen" unless="$(arg glog_to_file)"/>
    <arg name="ros_output" value="log" if="$(arg glog_to_file)"/>
    <arg name="log_registration" default="false"/>

    <arg name="rgb_frame" value="rgb_camera_link"/>

    <!-- <arg name="use_static_tfs" default="true"/>
    <include file="$(find dsg_habitat_sim)/launch/habitat_static_tfs.launch" if="$(arg use_static_tfs)"/> -->

    <include file="$(find kimera_topology)/launch/kimera_topology_semantic.launch">
        <arg name="use_gt_semantics" value="$(arg use_gt_semantics)"/>
        <arg name="use_gt_frame" value="$(arg use_gt_frame)"/>
        <arg name="show_stats" value="$(arg glog_to_file)"/>
        <arg name="semantic_color_path" value="$(arg semantic_map_path)" if="$(arg use_gt_semantics)"/>
        <arg name="glog_to_file" value="$(arg glog_to_file)"/>
        <arg name="glog_dir" value="$(arg topology_glog_dir)"/>
        <arg name="verbosity" value="$(arg verbosity)" if="$(arg glog_to_file)"/>
        <arg name="min_glog_level" value="$(arg min_glog_level)"/>
        <arg name="sensor_frame" value="$(arg rgb_frame)"/>

        <arg name="camera_info_topic" default="/habitat/agent_0/rgb_info" if="$(arg use_gt_semantics)"/>
        <arg name="camera_info_topic" default="/habitat/agent_0/rgb_info" unless="$(arg use_gt_semantics)"/>
        <arg name="camera_topic" default="/habitat/agent_0/rgb" if="$(arg use_gt_semantics)"/>
        <arg name="camera_topic" default="/habitat/agent_0/rgb" unless="$(arg use_gt_semantics)"/>
        <arg name="depth_topic" default="/habitat/agent_0/depth"/>
        <arg name="pointcloud_topic" default="/habitat/agent_0/pointcloud"/>

        <arg name="config" default="mp3d_topology_config.yaml"/>
        <arg name="semantic_config" default="mp3d_semantic_config.yaml" if="$(arg use_gt_semantics)"/>
        <arg name="semantic_config" default="ade150_semantic_config.yaml" unless="$(arg use_gt_semantics)"/>

        <arg name="include_pointcloud" value="false"/>
    </include>

    <include file="$(find kimera_dsg_visualizer)/launch/includes/kimera_dsg_visualizer_params.xml">
        <arg name="viz_config_dir" value="$(find kimera_dsg_builder)/config/incremental_visualizer"/>
    </include>

    <node pkg="kimera_dsg_builder" type="kimera_dsg_builder_incremental_node"
          name="incremental_dsg_builder_node"
          launch-prefix="$(arg launch_prefix)"
          args="--minloglevel=$(arg min_glog_level) -v=$(arg verbosity) $(arg glog_file_args)"
          required="true"
          output="$(arg ros_output)">
        <env name="OMP_NUM_THREADS" value="12"/>
        <env name="TERM" value="xterm-256color"/>

        <param name="enable_lcd" value="$(arg enable_dsg_lcd)"/>
        <param name="exit_after_bag" value="$(arg exit_after_bag)"/>
        <param name="use_oriented_bounding_boxes" value="$(arg use_oriented_bounding_boxes)"/>
        <param name="semantic_label_2_color_csv_filepath" value="$(arg semantic_map_path)"/>

        <rosparam file="$(arg typology_dir)/$(arg typology_config)"/>
        <rosparam file="$(find kimera_dsg_builder)/config/habitat/dsg_frontend_config.yaml"/>
        <rosparam file="$(find kimera_dsg_builder)/config/habitat/dsg_backend_config.yaml"/>
        <rosparam file="$(arg lcd_config)" ns="lcd"/>

        <param name="sensor_frame" value="$(arg rgb_frame)" if="$(arg use_gt_frame)"/>
        <param name="sensor_frame" value="$(arg rgb_frame)" unless="$(arg use_gt_frame)"/>
        <param name="dsg/optimize_on_lc" value="$(arg optimize_on_lc)"/>
        <param name="lcd/log_registration_problem" value="$(arg log_registration)"/>

        <param name="pgmo/log_path" value="$(arg pgmo_log_path)"/>
        <param name="pgmo/log_output" value="$(arg pgmo_should_log)"/>
        <param name="dsg_log_output" value="$(arg dsg_should_log)"/>
        <param name="dsg_output_path" value="$(arg dsg_path)"/>

        <remap from="~voxblox_mesh" to="/kimera_topology_node/active_mesh"/>
        <remap from="~active_places" to="/kimera_topology_node/active_layer"/>
        <remap from="~pose_graph_incremental" to="/kimera_vio_ros/pose_graph_incremental"
               unless="$(arg use_gt_frame)"/>
        <remap from="~/bow_vectors" to="/kimera_vio_ros/bow_query"/>
        <remap from="frame_registration" to="/kimera_vio_ros/kimera_vio_ros_node/register_lcd_frames"/>
    </node>

    <node pkg="kimera_dsg_builder" type="pose_graph_publisher_node"
          if="$(arg use_gt_frame)"
          name="pose_graph_publisher_node"
          required="true"
          output="log">
          <param name="keyframe_period_s" value="0.2"/>
          <param name="world_frame" value="world"/>
          <param name="robot_frame" value="$(arg rgb_frame)"/>
          <param name="robot_id" value="0"/>
          <remap from="~pose_graph" to="/incremental_dsg_builder_node/pose_graph_incremental"/>
    </node>

</launch>